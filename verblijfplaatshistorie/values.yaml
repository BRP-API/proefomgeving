# Default values for verblijfsplaatshistorie.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/brp-api/brp-autorisatie-protocollering
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag:

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 4444

ingress:
  enabled: true
  ingressClassName: "nginx"
  annotations:
     kubernetes.io/ingress.allow-http: \"true\"
  hosts:
    - host: historie.bzk-mev-ont.test4.s15m.nl
      paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            serviceName: historie
            servicePort: 4444
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

volumes:
  - name: logging

# de volume is extra, de logging wordt naar de out/err geschreven maar als de container vastloopt wordt de out/err stream leeg gemaakt
# door de volume als backup te hebben kan er dan toch nog gedebugged worden, zo is het probleem met ASPNETCORE_URLS ook naar voren gekomen 
volumeMounts:
  - name: logging
    mountPath: /mnt/logging
    readOnly: false

podTemplateLabels:
  tier: zeer-vertrouwd
  ingress-controller-frontoffice-policy: allow
  egress-frontoffice-policy: allow

env:
  - name: ASPNETCORE_ENVIRONMENT
    value: Release
  - name: ASPNETCORE_HTTP_PORTS
    value: "4444"
  # dit is nodig omdat er anders een permission denied optreed bij het binden van de socket
  - name: ASPNETCORE_URLS
    value: http://+:4444
  - name: OAuth__Authority
    value: http://identityserver.bzk-mev-ont.test4.s15m.nl
  - name: Db__Host
    value: database.bzk-mev-ont.svc:5432
  - name: Db__Username
    value: root
  - name: Db__Password
    value: root
  - name: Db__Database
    value: rvig_haalcentraal_testdata
  - name: HealthEndpointBase
    value: /brp-authorisatie/health
  - name: FeatureManagement__gebruikMeestRecenteAutorisatie
    value: "false"
  - name: Ecs__Path
    value: /mnt/logging/brp-autorisatie.json
  - name: Ecs__SecuredPath
    value: "/mnt/logging/brp-autorisatie-secured.json"
  # onderstaande kan ook met een ocelot.Release.json document in een persisted volume opgelost worden dat is makkelijk in beheer 
  - name: Routes__0__UpstreamPathTemplate
    value: /haalcentraal/api/brphistorie/verblijfplaatshistorie
  - name: Routes__0__DownstreamPathTemplate
    value: /haalcentraal/api/brphistorie/verblijfplaatshistorie
  - name: Routes__0__DownstreamScheme
    value: http
  - name: Routes__0__DownstreamHostAndPorts__0__Host
    value: localhost
  - name: Routes__0__DownstreamHostAndPorts__0__Port
    value: "5555"

sidecarInformatie:
  name:  historie-informatie-service
  repository: ghcr.io/brp-api/historie-informatie-service
  tag: 2.0.0-latest
  port: 5555
  volumeMounts:
  - name: logging
    mountPath: /mnt/logging
    readOnly: false
  env:
    - name: ASPNETCORE_ENVIRONMENT
      value: Release
    - name: ASPNETCORE_HTTP_PORTS
      value: "5555"
    # dit is nodig omdat er anders een permission denied optreed bij het binden van de socket
    - name: ASPNETCORE_URLS
      value: http://+:5555
    - name: Ecs__Path
      value: /mnt/logging/brp-historie-informatie.json
    - name: Ecs__SecuredPath
      value: /mnt/logging/brp-historie-informatie-secured.json
    # onderstaande kan ook met een ocelot.Release.json document in een persisted volume opgelost worden dat is makkelijk in beheer 
    - name: Routes__0__UpstreamPathTemplate
      value: /haalcentraal/api/brphistorie/verblijfplaatshistorie
    - name: Routes__0__DownstreamPathTemplate
      value: /haalcentraal/api/brphistorie/verblijfplaatshistorie
    - name: Routes__0__DownstreamScheme
      value: http
    - name: Routes__0__DownstreamHostAndPorts__0__Host
      value: localhost
    - name: Routes__0__DownstreamHostAndPorts__0__Port
      value: "6666"

sidecarData:
  name: historie-data-service
  repository: ghcr.io/brp-api/historie-data-service
  tag: 2.0.4-latest
  port: 6666
  volumeMounts:
  - name: logging
    mountPath: /mnt/logging
    readOnly: false
  env:
    - name: ASPNETCORE_ENVIRONMENT
      value: Release
    - name: ASPNETCORE_HTTP_PORTS
      value: "6666"
    # dit is nodig omdat er anders een permission denied optreed bij het binden van de socket
    - name: ASPNETCORE_URLS
      value: http://+:6666
    - name: Database__Host
      value: database.bzk-mev-ont.svc
    - name: Database__Port
      value: "5432"
    - name: Database__Username
      value: root
    - name: Database__Password
      value: root
    - name: Database__Database
      value: rvig_haalcentraal_testdata
    - name: Ecs__Path
      value: /mnt/logging/brp-historie-data.json
    - name: Ecs__SecuredPath
      value: "/mnt/logging/brp-historie-data-secured.json"
    # moet naar true maar dit is even om te testen
    - name: ProtocolleringAuthorization__UseProtocollering
      value: "false"
    # moet naar true maar dit is even om te testen
    - name: ProtocolleringAuthorization__UseAuthorizationChecks
      value: "false"